import numpy as np
# Adults:

# Histidine: 10
# Isoleucine: 20
# Leucine: 39
# Lysine: 30
# MethioninePlusCysteine: 15 (sulfur amino acids)
# PhenylalinePlusTyrosine: 25 (aromatic amino acids)
# Threonine: 15
# Tryptophan: 4
# Valine: 26

# sulfur devided
# Methionine: 10.4
# Cysteine: 4.1

class NutrientsPattern():

    def __init__(self,
                 histidine,
                 isoleucine,
                 leucine,
                 lysine,
                 methionine_plus_cysteine,
                 phenylaline_plus_tyrosine,
                 threonine,
                 tryptophan,
                 valine):
        self.histidine = histidine
        self.isoleucine = isoleucine
        self.leucine = leucine
        self.lysine = lysine
        self.methmethionine_plus_cysteine = methionine_plus_cysteine
        self.phenylaline_plus_tyrosine = phenylaline_plus_tyrosine
        self.threonine = threonine
        self.tryptophan = tryptophan
        self.valine = valine

    def mult(self, factor):
        for current_nutrient_str, current_amount in self.__dict__.items():
            self.__setattr__(current_nutrient_str, current_amount * factor)
        return self

    def add(self, other_nutrients_pattern):

        for current_nutrient_str, current_amount in self.__dict__.items():
            self.__setattr__(current_nutrient_str, current_amount + other_nutrients_pattern.__getattribute__(current_nutrient_str))

        return self

    def div(self, other_nutrients_pattern):

        for current_nutrient_str, current_amount in self.__dict__.items():
            self.__setattr__(current_nutrient_str, current_amount / other_nutrients_pattern.__getattribute__(current_nutrient_str))

        return self

    def __mul__(self, factor):

        return self.mult(factor)

    def __rmul__(self, factor):

        return self.mult(factor)
    
    def __add__(self, other):

        return self.add(other)

    def __radd__(self, other):

        return self.add(other)

    def __truediv__(self, other):

        return self.div(other)

    def __str__(self):
        ret_str = ''
        for current_nutrient_str, current_amount in self.__dict__.items():
            ret_str = ret_str + current_nutrient_str + ': ' + '%.2f' % current_amount + '\n'

        return ret_str


tissue_pattern = NutrientsPattern(27, 35, 75, 73, 35, 73, 42, 12, 49)

maintainance_pattern = NutrientsPattern(15, 30, 59, 45, 22, 38, 23, 6, 39)

tissue_factors = {
    'age':      [0.5,  1,   3,    15,   18],
    'factor':   [0.46, 0.2, 0.07, 0.04, 0.0]
}

maintanance_factor = 0.66

def calculate_requirements(age, weight_kg):
    tissue_factor = np.interp(age, tissue_factors['age'], tissue_factors['factor'])
    requirements_per_kg = tissue_pattern * tissue_factor + maintainance_pattern * maintanance_factor
    return requirements_per_kg * weight_kg

print(tissue_pattern / maintainance_pattern)

print(calculate_requirements(40, 85).__str__())
